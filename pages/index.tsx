import Head from 'next/head'
import { tableFromIPC } from 'apache-arrow';
import { readParquet } from 'parquet-wasm'
import { useQuery } from '@tanstack/react-query'
import Map from 'react-map-gl';
import DeckGL from '@deck.gl/react';
import { ScatterplotLayer } from '@deck.gl/layers';
import { H3HexagonLayer } from '@deck.gl/geo-layers';
import { useMemo } from 'react';

const MAPBOX_TOKEN = 'pk.eyJ1IjoibGFuZGdyaWZmb24iLCJhIjoiY2ttZGFnb2ZqMXB4YzJvcGg1cDl4NWx2diJ9.2y6gvQJGqso8BaNMayHzaw';

const fetchData = async () => fetch('/data/fs.parquet')
  .then(async (res) => new Uint8Array(await res.arrayBuffer()))
  .then((data) => readParquet(data));

export default function Home() {
  const { data, isLoading, error } = useQuery(['parquet'], fetchData, {
    refetchOnMount: false,
    refetchOnWindowFocus: false,
    refetchOnReconnect: false,
  });

  const layers = useMemo(() => {
    if (!data) return null;
    const arrowTable = tableFromIPC(data);
    console.log('arrowTable: ', arrowTable);
    const h3IndexColumn = arrowTable.getChild("h3index")
    console.log(h3IndexColumn);
    const flatH3IndexArray = h3IndexColumn.toArray();
    console.log(flatH3IndexArray);
    const layerData = {
      length: arrowTable.numRows,
      // Pregenerated attributes
      attributes: {
        getHexagon: { value: flatH3IndexArray, size: 1 },
        // Flat attributes array
        // Refer to https://deck.gl/docs/developer-guide/performance#supply-attributes-directly
        // getFillColor: { value: colorAttribute, size: 3 }
        // getFillColor: { value: new Uint8Array(arrowTable.numRows * 3), size: 1 }
      }
    };
    // const layer = new ScatterplotLayer({
    //   id: 'scatterplot-layer',
    //   data: layerData,
    //   getPointRadius: 10,
    //   pointRadiusMinPixels: 0.8
    // });
    const layer = new H3HexagonLayer({
      id: 'h3-hexagon-layer',
      data: layerData,
      pickable: false,
      wireframe: false,
      filled: true,
      extruded: false,
      elevationScale: 20,
      // getHexagon: d => d.hex,
      getFillColor: () => [255, 255, 0],
      // getElevation: d => d.count
    });

    return [layer];
  }, [data]);

  return (
    <div >
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="w-full h-screen">
          <DeckGL
            initialViewState={{
              longitude: 0,
              latitude: 0,
              zoom: 2
            }}
            controller={true}
            layers={layers}
          >
            <Map
              // style={{ width: '100%', height: '100%' }}
              mapboxAccessToken={MAPBOX_TOKEN}
              mapStyle="mapbox://styles/mapbox/light-v10"            
            />
          </DeckGL>
        </div>
      </main>
    </div>
  )
}
